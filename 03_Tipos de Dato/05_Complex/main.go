package main

import (
	"fmt"
	"math" // Se importa la biblioteca `math` que permite trabajar con operaciones matematicas m치s complejas
)

func main() {

	/*
		[N칰meros complejos]
		- complex: Esta funci칩n se utiliza para crear un n칰mero complejo a partir de sus partes real e imaginaria.
			Por ejemplo: complex(2, 3) crea el n칰mero complejo 2+3洧녰
		- real(complex): Devuelve la parte real de un n칰mero complejo.
		- imag(complex): Devuelve la parte imaginaria de un n칰mero complejo.
		- conj(complex): Devuelve el conjugado de un n칰mero complejo.
			El conjugado de 洧녩+洧녪洧녰 es 洧녩-b洧녰
		- abs(complex): Calcula el m칩dulo (o valor absoluto) de un n칰mero complejo. Es decir, devuelve la distancia del n칰mero complejo al origen en el plano complejo.
		- phase(complex): Calcula el 치ngulo (o fase) de un n칰mero complejo. Devuelve el 치ngulo en radianes entre el eje x positivo y la l칤nea que une el origen
			con el punto representado por el n칰mero complejo en el plano complejo.
		- polar(complex) (float64, float64): Convierte un n칰mero complejo en coordenadas polares y devuelve el m칩dulo y la fase.
		- rect(float64, float64) complex128: Convierte coordenadas polares (m칩dulo y fase) en un n칰mero complejo en coordenadas cartesianas.
	*/

	// Ejercicio b치sico

	// La variable "num" almacena un n칰mero complejo a partir de sus partes real e imaginaria (3,4) respectivamente.
	num := complex(3, 4)

	// La variable "modulus" almacena el m칩dulo del n칰mero complejo. La funci칩n `math.Sqrt()` calcula la ra칤z cuadrada.
	modulus := math.Sqrt(real(num)*real(num) + imag(num)*imag(num))

	fmt.Println("El m칩dulo es:", modulus)
}
